@{
    ViewBag.Title = "Github Issues";
}

<h2 class="inline-block">Github Issues</h2>
<h3 class="inline-block subtitle">(angular / angular)</h3>
<div id="IssuesContainer" class="item-container">

</div>
<div id="IssuePaginate" class="paginate-container">
    <div class="pagination">
        <a class="first-page">&lt&lt First</a>
        <a class="prev-page">&lt Prev</a>
        <a class="next-page">Next &gt</a>
        <a class="last-page">Last &gt&gt</a>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        //Seven days ago relative to today.
        var sevenDaysAgo = new Date();
        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
        sevenDaysAgo.setHours(0, 0, 0, 0);

        //Issue item template.
        var issueItem = '<div class="issue-item">' +
                            '<div>' +
                                '<div class="issue-comments"></div>' +
                                '<div class="issue-assignee"></div>' +
                            '</div>' +
                            '<a class="issue-content">' +
                                '<h4 class="issue-title"></h4>' +
                                '<div class="issue-body" style="display: none;"></div>' +
                                '<label class="issue-info"></label>' +
                            '</a>' +
                        '</div>';

        //Get first page of issues on load.
        $(function () {
            $.get('https://api.github.com/repos/angular/angular/issues?since=' + sevenDaysAgo.toISOString(), function (issueList, textStatus, request) { loadIssues(issueList, textStatus, request) });
        });

        //Show or hide issue body text on click.
        $("#IssuesContainer").on("click", "a.issue-content", function () {
            $(this).find("div.issue-body").slideToggle(200);
        })

        //Request desired page from issues api.
        $("#IssuePaginate").on("click", "a", function () {
            $.get($(this).data("link"), function (issueList, textStatus, request) { loadIssues(issueList, textStatus, request) });
        })

        //Load issues on get success.
        function loadIssues(issueList, textStatus, request) {
            //Set pagination button data
            var header = parse_link_header(request.getResponseHeader('Link'));
            if (header.first != null) {
                $("#IssuePaginate a.first-page").data("link", header.first);
                $("#IssuePaginate a.first-page").removeClass("disabled");
            }
            else {
                $("#IssuePaginate a.first-page").addClass("disabled");
            }
            if (header.prev != null) {
                $("#IssuePaginate a.prev-page").data("link", header.prev);
                $("#IssuePaginate a.prev-page").removeClass("disabled");
            }
            else {
                $("#IssuePaginate a.prev-page").addClass("disabled");
            }
            if (header.next != null) {
                $("#IssuePaginate a.next-page").data("link", header.next);
                $("#IssuePaginate a.next-page").removeClass("disabled");
            }
            else {
                $("#IssuePaginate a.next-page").addClass("disabled");
            }
            if (header.last != null) {
                $("#IssuePaginate a.last-page").data("link", header.last);
                $("#IssuePaginate a.last-page").removeClass("disabled");
            }
            else {
                $("#IssuePaginate a.last-page").addClass("disabled");
            }

            //Empty and populate issue container with new issue request.
            $("#IssuesContainer").empty();
            $.each(issueList, function () {
                var body = this.body.replace(/```/g, '<br />');
                var body = body.replace(/\**/g, '');
                var createdDate = new Date(this.created_at);
                var info = '#' + this.number;
                if (createdDate >= sevenDaysAgo) {
                    info += " created by " + this.user.login + " on " + this.created_at.substr(0, this.created_at.indexOf('T'));
                }
                else {
                    info += " by " + this.user.login + " updated " + this.updated_at.substr(0, this.created_at.indexOf('T'));
                }
                var issue = $(issueItem);
                issue.find('h4.issue-title').text(this.title);
                issue.find('div.issue-comments').html("<img src='../images/comments.png' /> " + this.comments);
                if (this.assignee != null) {
                    issue.find('div.issue-assignee').html("assigned to<br/>" + this.assignee.login);
                }
                issue.find('div.issue-body').html(body);
                issue.find('label.issue-info').text(info);
                $('#IssuesContainer').append(issue);
            })

        }

        //Parse link header to easily handle link updates.
        function parse_link_header(header) {
            if (header.length === 0) {
                throw new Error("input must not be of zero length");
            }
            // Split parts by comma
            var parts = header.split(',');
            var links = {};
            // Parse each part into a named link
            for (var i = 0; i < parts.length; i++) {
                var section = parts[i].split(';');
                if (section.length !== 2) {
                    throw new Error("section could not be split on ';'");
                }
                var url = section[0].replace(/<(.*)>/, '$1').trim();
                var name = section[1].replace(/rel="(.*)"/, '$1').trim();
                links[name] = url;
            }
            return links;
        }
    </script>
}